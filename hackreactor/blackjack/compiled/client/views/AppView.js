// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.template = _.template('<div class="game-status"><h2>Round is Not Over</h2></div> <div class="player-hand-container"></div> <div class="dealer-hand-container"></div> <button class="start-game btn btn-danger btn-lg">Start Game</button> <button class="hit-button btn btn-success btn-lg">Hit</button> <button class="stand-button btn btn-success btn-lg">Stand</button> <button class="new-game btn btn-danger btn-lg">New Game</button>');

    AppView.prototype.events = {
      "click .start-game": function() {
        this.model.start();
        $('.hit-button').css('visibility', 'visible');
        $('.stand-button').css('visibility', 'visible');
        $('.start-game').hide();
        if ((this.model.get('initialResult')) === 'blackjack') {
          this.endgame('Blackjack');
        }
        if ((this.model.get('initialResult')) === 'draw') {
          return this.endgame('Draw');
        }
      },
      "click .hit-button": function() {
        return this.model.get('playerHand').hit();
      },
      "click .stand-button": function() {
        return this.model.get('playerHand').stand();
      },
      "click .new-game": function() {
        return $('.container').html(new AppView({
          model: new App()
        }).$el);
      }
    };

    AppView.prototype.initialize = function() {
      this.model.on('bust', (function(_this) {
        return function() {
          return _this.endgame('Bust');
        };
      })(this));
      this.model.on('won', (function(_this) {
        return function() {
          return _this.endgame('Won');
        };
      })(this));
      this.model.on('lost', (function(_this) {
        return function() {
          return _this.endgame('Lost');
        };
      })(this));
      this.model.on('draw', (function(_this) {
        return function() {
          return _this.endgame('Draw');
        };
      })(this));
      return this.render();
    };

    AppView.prototype.render = function() {
      this.$el.children().detach();
      this.$el.html(this.template());
      this.$('.player-hand-container').html(new HandView({
        collection: this.model.get('playerHand')
      }).el);
      return this.$('.dealer-hand-container').html(new HandView({
        collection: this.model.get('dealerHand')
      }).el);
    };

    AppView.prototype.endgame = function(status) {
      if (status === 'Blackjack') {
        $('.game-status h2').text("You won with Blackjack!");
      }
      if (status === 'Bust') {
        $('.game-status h2').text("Game Over: You Busted!");
      }
      if (status === 'Won') {
        $('.game-status h2').text("You Won!");
      }
      if (status === 'Lost') {
        $('.game-status h2').text("You Lost!");
      }
      if (status === 'Draw') {
        $('.game-status h2').text("It's a Draw!");
      }
      $('.game-status').css('visibility', 'visible');
      $('.new-game').css('visibility', 'visible');
      $('.hit-button').hide();
      return $('.stand-button').hide();
    };

    return AppView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=AppView.map
